import random
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from collections import deque
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from torch.utils.data import DataLoader, TensorDataset
import requests
import matplotlib.pyplot as plt
from datetime import datetime
import os

# --- CONFIGURATION ---
CONFIG = {
    "symbol": "BTCUSDT",
    "interval": "1h",
    "limit": 1400,
    "sequence_length": 24,
    "future_offset": 3,
    "batch_size": 64,
    "epochs": 1200,
    "lr": 0.001,
    "device": "cuda" if torch.cuda.is_available() else "cpu",
    "model_path": "lstm_model.pth",
    "log_path": "trading_log.txt",
    "starting_balance": 1500,
}


# --- DATA FETCHING ---
def fetch_binance(symbol, interval, limit):
    url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
    data = requests.get(url).json()
    df = pd.DataFrame(data, columns=[
        "timestamp", "open", "high", "low", "close", "volume",
        "close_time", "quote_asset_volume", "number_of_trades",
        "taker_buy_base_volume", "taker_buy_quote_volume", "ignore"
    ])
    df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
    df.set_index("timestamp", inplace=True)
    df = df[["open", "high", "low", "close", "volume"]].astype(float)
    return df


# --- FEATURE ENGINEERING ---
def add_features(df, future_offset=3):
    df["hour"] = df.index.hour
    df["future_close"] = df["close"].shift(-future_offset)
    df["target"] = 1 * (df["future_close"] > df["close"]) + 2 * (df["future_close"] < df["close"])
    df.dropna(inplace=True)
    return df


# --- SEQUENCE CREATION ---
def create_sequences(df, seq_len, scaler=None):
    features = ["open", "high", "low", "close", "volume", "hour"]
    if scaler is None:
        scaler = MinMaxScaler()
        df[features] = scaler.fit_transform(df[features])
    else:
        df[features] = scaler.transform(df[features])

    X, y = [], []
    for i in range(len(df) - seq_len):
        X.append(df[features].iloc[i:i + seq_len].values)
        y.append(df["target"].iloc[i + seq_len - 1])
    return torch.tensor(np.array(X), dtype=torch.float32), torch.tensor(np.array(y), dtype=torch.long), scaler


# --- MODEL ---
class LSTMModel(nn.Module):
    def __init__(self, input_size):
        super().__init__()
        self.lstm = nn.LSTM(input_size, 64, batch_first=True)
        self.fc = nn.Sequential(
            nn.Linear(64, 32),
            nn.ReLU(),
            nn.Linear(32, 3)  # Classes: hold, buy, sell
        )

    def forward(self, x):
        out, _ = self.lstm(x)
        return self.fc(out[:, -1, :])


# --- TRAINING ---
def train_model(X, y, input_size, device, epochs=1200):
    model = LSTMModel(input_size).to(device)
    loader = DataLoader(TensorDataset(X, y), batch_size=CONFIG["batch_size"], shuffle=True)
    loss_fn = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=CONFIG["lr"])

    for epoch in range(epochs):
        model.train()
        total_loss = 0
        for xb, yb in loader:
            xb, yb = xb.to(device), yb.to(device)
            optimizer.zero_grad()
            out = model(xb)
            loss = loss_fn(out, yb)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()
        if epoch % 10 == 0 or epoch == epochs - 1:
            print(f"Epoch {epoch+1}/{epochs} - Loss: {total_loss:.4f}")

    torch.save(model.state_dict(), CONFIG["model_path"])
    print(f"üíæ Model saved to {CONFIG['model_path']}")
    return model


# --- SIMULATED TRADING ---
def simulate_trading(model, df, scaler, seq_len, device, future_offset):
    model.eval()
    features = ["open", "high", "low", "close", "volume", "hour"]
    df[features] = scaler.transform(df[features])

    balance = CONFIG["starting_balance"]
    open_trade = None
    closes = df["close"].values
    trade_log = []
    pnl_list = []
    trade_signals = []
    prices_for_plot = []
    successful_trades = 0

    with torch.no_grad():
        for i in range(len(df) - seq_len - future_offset):
            X_seq = df[features].iloc[i:i + seq_len].values
            raw_close_price = closes[i + seq_len - 1]
            prices_for_plot.append(raw_close_price)

            x_tensor = torch.tensor([X_seq], dtype=torch.float32).to(device)
            logits = model(x_tensor)
            action = torch.argmax(logits, dim=1).item()

            position_size = balance * 0.1

            if open_trade is None and action in [1, 2]:  # Buy or sell
                open_trade = {
                    "direction": "buy" if action == 1 else "sell",
                    "price": raw_close_price,
                    "index": i,
                }
                balance -= position_size
                trade_signals.append((open_trade["direction"].capitalize(), i))
            elif open_trade is not None and ((action == 1 and open_trade["direction"] == "sell") or (action == 2 and open_trade["direction"] == "buy")):
                old_price = open_trade["price"]
                change = ((raw_close_price - old_price) / old_price) if open_trade["direction"] == "buy" else ((old_price - raw_close_price) / old_price)
                if not np.isfinite(change):
                    continue

                pnl = position_size * change
                pnl_list.append(pnl)
                balance += pnl
                if pnl > 0:
                    successful_trades += 1

                trade_log.append(f"{datetime.now()} - {open_trade['direction'].upper()} @ {old_price:.2f} ‚Üí {raw_close_price:.2f} | PnL: {pnl:.2f}")
                open_trade = {
                    "direction": "buy" if action == 1 else "sell",
                    "price": raw_close_price,
                    "index": i,
                }
                position_size = balance * 0.1
                balance -= position_size
                trade_signals.append(("Buy" if action == 1 else "Sell", i))

    with open(CONFIG["log_path"], "w") as f:
        for line in trade_log:
            f.write(line + "\n")

    print(f"‚úÖ Total trades: {len(pnl_list)}")
    print(f"‚úÖ Successful trades: {successful_trades}")
    print(f"üìä Avg PnL: ${np.mean(pnl_list):.2f}" if pnl_list else "No trades")
    print(f"üí∞ Final balance: ${balance:.2f}")

    plt.figure(figsize=(14, 6))
    plt.plot(prices_for_plot, label="Price")
    for signal, idx in trade_signals:
        color = "green" if signal == "Buy" else "red"
        plt.scatter(idx, prices_for_plot[idx], color=color, marker="^" if signal == "Buy" else "v", label=signal if idx == trade_signals[0][1] else "")
    plt.title("Trade Signals")
    plt.xlabel("Time")
    plt.ylabel("Price")
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.show()

    return balance


# --- YES/NO PROMPT ---
def ask_yes_no(prompt):
    while True:
        response = input(f"{prompt} (y/n): ").strip().lower()
        if response in ['y', 'n']:
            return response == 'y'
        print("Please enter 'y' or 'n'.")


# --- MAIN ---
def main():
    print(f"üöÄ Running on {CONFIG['device'].upper()}")
    retrain = ask_yes_no("‚ùì Do you want to retrain the model from scratch?")

    df = fetch_binance(CONFIG["symbol"], CONFIG["interval"], CONFIG["limit"])
    df = add_features(df, CONFIG["future_offset"])
    X, y, scaler = create_sequences(df.copy(), CONFIG["sequence_length"])

    model = LSTMModel(X.shape[2])

    if os.path.exists(CONFIG["model_path"]) and not retrain:
        model.load_state_dict(torch.load(CONFIG["model_path"], map_location=CONFIG["device"]))
        model.to(CONFIG["device"])
        print("‚úÖ Loaded saved model from disk.")
    else:
        print("üîß Training model from scratch...")
        model = train_model(X, y, X.shape[2], CONFIG["device"], epochs=CONFIG["epochs"])

    print("üìà Starting trading simulation...")
    simulate_trading(model, df.copy(), scaler, CONFIG["sequence_length"], CONFIG["device"], CONFIG["future_offset"])


if __name__ == "__main__":
    main()

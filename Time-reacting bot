# --- Imports ---
import requests
import pandas as pd
import numpy as np
import torch
import torch.nn as nn
from sklearn.preprocessing import MinMaxScaler
from torch.utils.data import DataLoader, TensorDataset


# --- Step 1: Get Binance Data ---
def fetch_binance(symbol="BTCUSDT", interval="1h", limit=1000):
    url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
    data = requests.get(url).json()
    df = pd.DataFrame(data, columns=[
        "timestamp", "open", "high", "low", "close", "volume",
        "close_time", "quote_asset_volume", "number_of_trades",
        "taker_buy_base_volume", "taker_buy_quote_volume", "ignore"
    ])
    df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
    df.set_index("timestamp", inplace=True)
    df = df[["open", "high", "low", "close", "volume"]].astype(float)
    return df


# --- Step 2: Feature Engineering ---
def add_features(df):
    df["hour"] = df.index.hour
    df["future_close"] = df["close"].shift(-3)
    df["target"] = 1 * (df["future_close"] > df["close"]) + 2 * (df["future_close"] < df["close"])
    df.dropna(inplace=True)
    return df


# --- Step 3: Preprocess for LSTM ---
def create_sequences(df, seq_len=24):
    features = ["open", "high", "low", "close", "volume", "hour"]
    scaler = MinMaxScaler()
    df[features] = scaler.fit_transform(df[features])
    X, y = [], []
    for i in range(len(df) - seq_len):
        X.append(df[features].iloc[i:i + seq_len].values)
        y.append(df["target"].iloc[i + seq_len - 1])
    return torch.tensor(np.array(X), dtype=torch.float32), torch.tensor(np.array(y), dtype=torch.long)


# --- Step 4: Define Model ---
class LSTMModel(nn.Module):
    def __init__(self, input_size):
        super().__init__()
        self.lstm = nn.LSTM(input_size, 64, batch_first=True)
        self.fc = nn.Sequential(
            nn.Linear(64, 32),
            nn.ReLU(),
            nn.Linear(32, 3)  # Classes: Neutral, Long, Short
        )

    def forward(self, x):
        out, _ = self.lstm(x)
        return self.fc(out[:, -1, :])


# --- Step 5: Train Model ---
def train(X, y, input_size, epochs=1200):
    model = LSTMModel(input_size)
    loader = DataLoader(TensorDataset(X, y), batch_size=64, shuffle=True)
    loss_fn = nn.CrossEntropyLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

    for epoch in range(epochs):
        total_loss = 0
        for xb, yb in loader:
            optimizer.zero_grad()
            out = model(xb)
            loss = loss_fn(out, yb)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()
        print(f"Epoch {epoch + 1}/{epochs} - Loss: {total_loss:.4f}")
    return model


# --- Step 6: Predict ---
def predict_next(model, df, seq_len=24):
    recent = df[["open", "high", "low", "close", "volume", "hour"]].iloc[-seq_len:]
    if len(recent) < seq_len:
        return "Not enough data"
    scaler = MinMaxScaler()
    scaled = scaler.fit_transform(recent)
    x = torch.tensor(np.array([scaled]), dtype=torch.float32)
    pred = model(x)
    action = torch.argmax(pred, dim=1).item()
    return ["Neutral", "Long (BUY)", "Short (SELL)"][action]


# --- Step 7: Evaluate Model ---
def evaluate_model(model, df, seq_len=24):
    correct_trades = 0
    total_trades = 0
    features = ["open", "high", "low", "close", "volume", "hour"]
    scaler = MinMaxScaler()
    df[features] = scaler.fit_transform(df[features])

    for i in range(len(df) - seq_len - 3):
        X_seq = df[features].iloc[i:i + seq_len].values
        future_close = df["close"].iloc[i + seq_len + 2]  # 3 hours ahead
        current_close = df["close"].iloc[i + seq_len - 1]

        x_tensor = torch.tensor([X_seq], dtype=torch.float32)
        pred = model(x_tensor)
        action = torch.argmax(pred, dim=1).item()

        if action == 1 and future_close > current_close:
            correct_trades += 1
            total_trades += 1
        elif action == 2 and future_close < current_close:
            correct_trades += 1
            total_trades += 1
        elif action == 1 or action == 2:
            total_trades += 1

    winrate = (correct_trades / total_trades * 100) if total_trades > 0 else 0
    print(f"âœ… Trades made: {total_trades}")
    print(f"ðŸŽ¯ Successful trades: {correct_trades}")
    print(f"ðŸ“Š Win rate: {winrate:.2f}%")
    return winrate


# --- Main ---
if __name__ == "__main__":
    df = fetch_binance()
    df = add_features(df)
    X, y = create_sequences(df)
    model = train(X, y, X.shape[2], epochs=1200)  # Train for 1000 epochs

    # Prediction for the next 3 hours
    decision = predict_next(model, df)
    print(f"ðŸ“ˆ Prediction for next 3 hours: {decision}")

    # Evaluate model performance
    win_rate = evaluate_model(model, df)
    print(f"ðŸ’¡ Model Win Rate: {win_rate:.2f}")
